@name AI Core By Naki
#@inputs [Target]:entity
@inputs Entity:entity
@outputs W S Shift Mouse1 Mouse2 Space EyeAngles:angle
@persist RefreshRate Entity:entity Target:entity
@persist WalkDistance StopDistance AimRadius AimRange TooClose CamControllerMode Mouse2Aim HeightLimit CanJump
if(first()){
    
    Target=owner()
    
    #Entity=entity()
    
    WalkDistance=1500
    
    StopDistance=500
    TooClose=250
    
    AimRadius=15
    AimRange=2500
    
    HeightLimit=100
    
    RefreshRate=100
    
    CamControllerMode=1
    Mouse2Aim=1
    CanJump=1
}

interval(RefreshRate)

Distance=round(Target:pos():distance(Entity:pos()))
DistanceIgnoreZ=round((Target:pos()*vec(1,1,0)):distance(Entity:pos()*vec(1,1,0)))
DistanceZ=round(Target:pos():z()-Entity:pos():z())
if(Distance>WalkDistance+StopDistance){
    Shift=1
}else{
    Shift=0
}

if(Distance>StopDistance){
    W=1
    S=0
}elseif(Distance<TooClose){
    W=0
    S=1
}else{
    W=0
    S=0
}

if(CamControllerMode){
    #Acts like cam controller camAng()
if((Target:pos()-Entity:pos()):toAngle():pitch()<180.1){
    EyeAngles=(Target:pos()-Entity:pos()):toAngle()
}else{
    EyeAngles=ang((Target:pos()-Entity:pos()):toAngle():pitch()-360,(Target:pos()-Entity:pos()):toAngle():yaw(),0)
}
}else{
    #Acts like player eyeAngles()
    EyeAngles=(Target:pos()-Entity:pos()):toAngle()
}
if(Target:pos():distance(Entity:pos()+Entity:forward()*Distance)<AimRadius+(Distance/8)){
    Mouse1=1
}else{
    Mouse1=0
}

if(Distance<AimRange){
    Mouse2=1*Mouse2Aim
}else{
    Mouse2=0*Mouse2Aim
}

if(DistanceIgnoreZ<WalkDistance/3){
    if(DistanceZ*CanJump>HeightLimit){
        timer("unjump",1000)
        if(clk("unjump")){
            Space=0
        }else{
            Space=1*CanJump
        }
    }else{
        Space=0
    }
}else{
    Space=0
}
