@name Holo Text E2 by Naki
@persist Text:string Distance Scale:vector Font Color:vector T:array Text_Spawn_Rate Count C
if(first()){
    
    entity():setAlpha(0)
    
    #Settings - Feel Free To Edit Me!
    
    Text = "Created By Naki, i support \"everything\" :)."# (Except few things that Expression2 doesn't support.)
    
    Distance = -0.5
    
    Scale=vec(1,5,5)
    
    Font = 2
    
    Color = vec(255)
    
    Text_Spawn_Rate = 100
    
    #Code Part - Don't Edit
    
    T = Text:explode("")
    function text(Index,Array:array){
            
        I=Index+100
        holoCreate(I)
        if(Index==1){
            holoPos(I,entity():toWorld((vec(0,0,0)+vec(0,0,0))*vec(Scale:x(),Scale:y(),1)))
        }else{
            holoPos(I,holoEntity(I-1):toWorld(vec(-1.8-Distance,0,0)*vec(Scale:y(),Scale:x(),Scale:z())))
        }
        holoAng(I,entity():toWorld(ang(0,-90,90)))
        holoParent(I,entity())
        holoScale(I,vec(0.12,0.05,0.13)*vec(Scale:y(),Scale:x(),Scale:z()))
        
        if(T[Index,string]=="."){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_prd.mdl")
        }elseif(T[Index,string]==","){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_com.mdl")
        }elseif(T[Index,string]==":"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_colon.mdl")
        }elseif(T[Index,string]==";"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_scolon.mdl")
        }elseif(T[Index,string]=="?"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_qmark.mdl")
        }elseif(T[Index,string]=="!"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_xmark.mdl")
        }elseif(T[Index,string]=="\""){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_quote.mdl")
        }elseif(T[Index,string]=="~"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_tilde.mdl")
        }elseif(T[Index,string]=="<"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_lessthan.mdl")
        }elseif(T[Index,string]==">"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_greaterthan.mdl")
        }elseif(T[Index,string]=="_"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_underscore.mdl")
        }elseif(T[Index,string]=="@"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_atsign.mdl")
        }elseif(T[Index,string]=="#"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_pdsign.mdl")
        }elseif(T[Index,string]=="$"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_dlsign.mdl")
        }elseif(T[Index,string]=="%"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_pcnt.mdl")
        }elseif(T[Index,string]=="^"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_crt.mdl")
        }elseif(T[Index,string]=="&"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_and.mdl")
        }elseif(T[Index,string]=="'"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_apost.mdl")
        }elseif(T[Index,string]=="("){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_lpar.mdl")
        }elseif(T[Index,string]==")"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_rpar.mdl")
        }elseif(T[Index,string]=="["){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_lbracket.mdl")
        }elseif(T[Index,string]=="]"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_rbracket.mdl")
        }elseif(T[Index,string]=="{"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_lcbracket.mdl")
        }elseif(T[Index,string]=="}"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_rcbracket.mdl")
        }elseif(T[Index,string]=="|"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_bar.mdl")
        }elseif(T[Index,string]=="+"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_plu.mdl")
        }elseif(T[Index,string]=="-"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_min.mdl")
        }elseif(T[Index,string]=="*"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_ast.mdl")
        }elseif(T[Index,string]=="/"){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_div.mdl")
        }elseif(T[Index,string]=="="){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_equal.mdl")
        }elseif(T[Index,string]==" "){
            holoModel(I,"models/sprops/misc/alphanum/alphanum_equal.mdl")
            holoAlpha(I,0)
        }else{
            if(T[Index,string] == T[Index,string]:upper()){
                holoModel(I,"models/sprops/misc/alphanum/alphanum_"+T[Index,string]+".mdl")
            }elseif(T[Index,string] == T[Index,string]:lower()){
                holoModel(I,"models/sprops/misc/alphanum/alphanum_l_"+T[Index,string]+".mdl")
            }
        }
        holoBodygroup(I,0,Font)
        holoMaterial(I,"models/debug/debugwhite")
        holoColor(I,Color)
    }
    Count = T:count()
    C = 0
    printColor(vec(255,0,0),"["+entity():getName()+"]",vec(255)," Creating ",vec(0,255,0),Count,vec(255)," holos...")
    timer("create",100)
}

if(clk("create")){
    if(C<Count){
        C++
        timer("create",Text_Spawn_Rate)
        text(C,T)
    }else{
        printColor(vec(255,0,0),"["+entity():getName()+"]",vec(255)," Finished creating ",vec(0,255,0),C,vec(255)," holos in "+((Text_Spawn_Rate*C)/1000)+" seconds.")
    }
}
if(dupefinished()){
    reset()
}
